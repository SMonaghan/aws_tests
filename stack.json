{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloudformation stack to create LAMP servers.  Uses EC2 for the server, RDS for the database, and Secrets Manager to store randomly generated RDS credentials.",
  "Parameters": {
    "RDSSubnets": {
      "Description": "Subnet Ids for RDS Instances",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Must be valid subnet ids"
    },
    "EC2Subnets": {
      "Description": "Subnet Ids for EC2 Instances",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Must be valid subnets ids"
    },
    "AmiId": {
      "Description": "Ami Id",
      "Type": "AWS::EC2::Image::Id",
      "Default": "ami-0915bcb5fa77e4892",
      "ConstraintDescription": "Must be a valid ami id"
    },
    "SecretName": {
      "Description": "Name of Secret",
      "Type": "String"
    },
    "DBName": {
      "Description": "Name of DB",
      "Type": "String"
    },
    "SSHPubKey": {
      "Description": "SSH Public Key (not AWS Key Pair, just your public key)",
      "Type": "String",
      "AllowedPattern": "ssh-rsa AAAA[0-9A-Za-z+/]+[=]{0,3} ([^@]+@[^@]+)",
      "ConstraintDescription": "Must be valid ssh public key (\"ssh-rsa AAAA[0-9A-Za-z+/]+[=]{0,3} ([^@]+@[^@]+\")"
    },
    "BucketName": {
      "Description": "Name of S3 bucket to create",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "(?=^.{3,63}$)(?!^(\\d+\\.)+\\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])$)",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instances (also used to allow web access so make sure your ip is in the range)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Resources": {
    "LAMPRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CustomLAMP",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
                "secretsmanager:ListSecretVersionIds"
              ],
              "Resource": {
                "Ref": "MyRDSInstanceRotationSecret"
              }
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Sub": [
                  "${BucketArn}/*",
                  {
                    "BucketArn": {
                      "Fn::GetAtt": [
                        "S3Bucket",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LAMPRole"
          }
        ]
      }
    },
    "LAMPInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "LAMPRole"
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "BucketName"
        }
      }
    },
    "MyLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": "MyLaunchTemplate",
        "LaunchTemplateData": {
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "LAMPInstanceProfile",
                "Arn"
              ]
            }
          },
          "ImageId": {
            "Ref": "AmiId"
          },
          "InstanceType": "t3.micro",
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "WebServerSecurityGroup",
                "GroupId"
              ]
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "export HOME='/root'\n",
                  "yum install -y aws-cfn-bootstrap\n",
                  "mkdir -p ~ec2-user/.ssh/\n",
                  "echo \"",
                  {
                    "Ref": "SSHPubKey"
                  },
                  "\" > ~ec2-user/.ssh/authorized_keys\n",
                  "yum install httpd mariadb jq php php-mysql git -y\n",
                  "/usr/bin/amazon-linux-extras install php7.2\n",
                  "yum install php-xml* -y\n",
                  "git clone https://github.com/SMonaghan/aws_tests.git ~/code \n",
                  "/root/code/composer_install.sh\n",
                  "mv composer.phar /usr/local/bin/composer\n",
                  "/usr/local/bin/composer require aws/aws-sdk-php -d /var/www/html/\n",
                  "/usr/bin/cp ~/code/form.html /var/www/html/index.html\n",
                  "/usr/bin/cp ~/code/form_submit.php /var/www/html/form_submit.php\n",
                  "/usr/bin/cp ~/code/form_get.php /var/www/html/form_get.php\n",
                  "mysql -u admin --host ",
                  {
                    "Fn::GetAtt": [
                      "MyDB",
                      "Endpoint.Address"
                    ]
                  },
                  " --password=`aws secretsmanager get-secret-value --secret-id ",
                  {
                    "Ref": "SecretName"
                  },
                  " --region us-east-1 --query 'SecretString' |jq . -r|jq .password -r` ",
                  {
                    "Ref": "DBName"
                  },
                  " < /root/code/create_table.sql\n",
                  "/bin/echo '<?php' >                                           /var/www/html/dynamic.php\n",
                  "/bin/echo '$host = \"",
                  {
                    "Fn::GetAtt": [
                      "MyDB",
                      "Endpoint.Address"
                    ]
                  },
                  "\";' >>        /var/www/html/dynamic.php\n",
                  "/bin/echo '$db_name = \"",
                  {
                    "Ref": "DBName"
                  },
                  "\";' >>        /var/www/html/dynamic.php\n",
                  "/bin/echo '$username = \"admin\";' >>         /var/www/html/dynamic.php\n",
                  "/bin/echo \"\\$secretName = '",
                  {
                    "Ref": "SecretName"
                  },
                  "';\" >> /var/www/html/dynamic.php\n",
                  "/bin/echo '?>' >>                            /var/www/html/dynamic.php\n",
                  "touch /var/www/html/log.log\n",
                  "chown apache:root /var/www/html/log.log\n",
                  "systemctl start httpd\n",
                  "\n"
                ]
              ]
            }
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "MinSize": "2",
        "MaxSize": "8",
        "DesiredCapacity": "2",
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "120",
        "LoadBalancerNames": [{
          "Ref": "LAMPLoadBalancer"
        }],
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "MyLaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "MyLaunchTemplate",
              "LatestVersionNumber"
            ]
          }
        },
        "VPCZoneIdentifier": {
          "Ref": "EC2Subnets"
        }
      }
    },
    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupName": {
              "Ref": "WebServerSecurityGroup"
            }
          }
        ]
      }
    },
    "MyRDSInstanceRotationSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": {
          "Ref": "SecretName"
        },
        "Description": "This is my rds instance secret",
        "GenerateSecretString": {
          "SecretStringTemplate": "{\"username\": \"admin\"}",
          "GenerateStringKey": "password",
          "PasswordLength": 16,
          "ExcludeCharacters": "\"@/\\"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "RDSSecret"
          }
        ]
      }
    },
    "MyDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Test Group",
        "SubnetIds": {
          "Ref": "RDSSubnets"
        }
      }
    },
    "MyDB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "MultiAZ": false,
        "PubliclyAccessible": false,
        "AllocatedStorage": "5",
        "DBName": {
          "Ref": "DBName"
        },
        "DBInstanceClass": "db.t3.micro",
        "DBSubnetGroupName": {
          "Ref": "MyDBSubnetGroup"
        },
        "Engine": "MySQL",
        "MasterUsername": {
          "Fn::Sub": "{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::username}}"
        },
        "MasterUserPassword": {
          "Fn::Sub": "{{resolve:secretsmanager:${MyRDSInstanceRotationSecret}::password}}"
        },
        "BackupRetentionPeriod": 0,
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "DBEC2SecurityGroup",
              "GroupId"
            ]
          }
        ]
      },
      "DeletionPolicy": "Snapshot"
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via port 80 and allow SSH",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupName": {
              "Ref": "LoadBalancerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "LAMPLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [{
          "Fn::GetAtt": ["LoadBalancerSecurityGroup", "GroupId"]
        }],
        "Subnets": {
          "Ref": "EC2Subnets"
        },
        "CrossZone": "true",
        "Listeners": [
          {
            "InstancePort": "80",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "3",
          "Interval": "10",
          "Timeout": "5"
        }
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow inbound connection to ELB",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "ASGScalingPolicyHigh":{
      "Type":"AWS::AutoScaling::ScalingPolicy",
      "Properties":{
        "AdjustmentType":"ChangeInCapacity",
        "PolicyType":"SimpleScaling",
        "Cooldown":"150",
        "AutoScalingGroupName":{
          "Ref":"AutoScalingGroup"
        },
        "ScalingAdjustment": 1
      }
    },
    "ASGScalingPolicyLow":{
      "Type":"AWS::AutoScaling::ScalingPolicy",
      "Properties":{
        "AdjustmentType":"ChangeInCapacity",
        "PolicyType":"SimpleScaling",
        "Cooldown":"300",
        "AutoScalingGroupName":{
          "Ref":"AutoScalingGroup"
        },
        "ScalingAdjustment": -1
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU is greater than 70% for 4 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "120",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "ASGScalingPolicyHigh"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU is less than 50% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "50",
        "AlarmActions": [
          {
            "Ref": "ASGScalingPolicyLow"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    }

  },
  "Outputs" : {
    "LoadBalancerDNSName" : {
      "Description": "The DNS name of the ELB",
      "Value" : { "Fn::GetAtt" : [ "LAMPLoadBalancer", "DNSName" ]}
    }
  }
}
